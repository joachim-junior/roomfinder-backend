generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                       @id @default(cuid())
  email                    String                       @unique
  password                 String
  firstName                String
  lastName                 String
  phone                    String?
  role                     UserRole                     @default(GUEST)
  isVerified               Boolean                      @default(false)
  avatar                   String?
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  hostApprovalStatus       HostApprovalStatus?
  hostApprovalDate         DateTime?
  hostApprovalNotes        String?
  hostRejectionReason      String?
  hostApplicationDate      DateTime?
  hostApplicationNotes     String?
  createdAt                DateTime                     @default(now())
  updatedAt                DateTime                     @updatedAt
  blogComments             BlogComment[]                @relation("BlogCommentAuthor")
  blogs                    Blog[]                       @relation("BlogAuthor")
  bookings                 Booking[]                    @relation("GuestBookings")
  coHostInvitations        CoHost[]                     @relation("CoHostInvitations")
  coHostProperties         CoHost[]                     @relation("CoHostProperties")
  assignedTickets          CustomerSupport[]            @relation("AdminSupportTickets")
  supportTickets           CustomerSupport[]            @relation("UserSupportTickets")
  deviceTokens             DeviceToken[]
  favorites                Favorite[]
  helpCenterArticles       HelpCenter[]                 @relation("HelpAuthor")
  receivedMessages         Message[]                    @relation("ReceivedMessages")
  sentMessages             Message[]                    @relation("SentMessages")
  notifications            Notification[]
  properties               Property[]                   @relation("HostProperties")
  guestPropertyEnquiries   PropertyEnquiry[]            @relation("GuestEnquiries")
  propertyEnquiries        PropertyEnquiry[]            @relation("HostEnquiries")
  reviews                  Review[]                     @relation("UserReviews")
  supportMessages          SupportMessage[]             @relation("SupportMessageSender")
  transactions             Transaction[]
  notificationPreferences  UserNotificationPreferences?
  wallet                   Wallet?

  @@map("users")
}

model Property {
  id          String            @id @default(cuid())
  title       String
  description String
  type        PropertyType
  address     String
  city        String
  state       String
  country     String
  zipCode     String?
  latitude    Float?
  longitude   Float?
  price       Float
  currency    String            @default("XAF")
  bedrooms    Int
  bathrooms   Int
  maxGuests   Int
  amenities   String[]
  images      String[]
  isAvailable Boolean           @default(true)
  isVerified  Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  hostId      String
  bookings    Booking[]
  coHosts     CoHost[]
  favorites   Favorite[]
  host        User              @relation("HostProperties", fields: [hostId], references: [id], onDelete: Cascade)
  enquiries   PropertyEnquiry[]
  reviews     Review[]

  @@map("properties")
}

model Booking {
  id               String        @id @default(cuid())
  checkIn          DateTime
  checkOut         DateTime
  guests           Int
  totalPrice       Float
  status           BookingStatus @default(PENDING)
  specialRequests  String?
  paymentReference String?
  paymentUrl       String?
  transactionId    String?
  statusReason     String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  propertyId       String
  guestId          String
  paymentMethod    PaymentMethod @default(MOBILE_MONEY)
  paymentStatus    PaymentStatus @default(PENDING)
  metadata         String?
  guest            User          @relation("GuestBookings", fields: [guestId], references: [id], onDelete: Cascade)
  property         Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  transactions     Transaction[]

  @@map("bookings")
}

model Review {
  id         String   @id @default(cuid())
  rating     Int      @db.SmallInt
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  propertyId String
  userId     String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([propertyId, userId])
  @@map("reviews")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId   String
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id        String             @id @default(cuid())
  title     String
  body      String
  type      NotificationType   @default(EMAIL)
  status    NotificationStatus @default(UNREAD)
  data      String?
  readAt    DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model UserNotificationPreferences {
  id                   String   @id @default(cuid())
  emailNotifications   Boolean  @default(true)
  pushNotifications    Boolean  @default(true)
  bookingNotifications Boolean  @default(true)
  reviewNotifications  Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notification_preferences")
}

model DeviceToken {
  id        String   @id @default(cuid())
  token     String   @unique
  platform  String   @default("android")
  isActive  Boolean  @default(true)
  lastUsed  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("device_tokens")
}

model Wallet {
  id           String        @id @default(cuid())
  balance      Float         @default(0)
  currency     String        @default("XAF")
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String        @unique
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Transaction {
  id              String            @id @default(cuid())
  amount          Float
  currency        String            @default("XAF")
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  description     String
  reference       String?
  metadata        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  hostServiceFee  Float?
  guestServiceFee Float?
  platformRevenue Float?
  netAmount       Float?
  walletId        String
  userId          String
  bookingId       String?
  booking         Booking?          @relation(fields: [bookingId], references: [id])
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet          Wallet            @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model RevenueConfig {
  id                     String   @id @default(cuid())
  name                   String   @unique
  description            String?
  hostServiceFeePercent  Float    @default(5.0)
  hostServiceFeeMin      Float    @default(0)
  hostServiceFeeMax      Float?
  guestServiceFeePercent Float    @default(3.0)
  guestServiceFeeMin     Float    @default(0)
  guestServiceFeeMax     Float?
  isActive               Boolean  @default(true)
  appliesToBooking       Boolean  @default(true)
  appliesToWithdrawal    Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("revenue_configs")
}

model PlatformRevenue {
  id            String   @id @default(cuid())
  date          DateTime @default(now())
  revenueType   String
  amount        Float
  currency      String   @default("XAF")
  transactionId String?
  bookingId     String?
  userId        String?
  description   String
  metadata      String?
  createdAt     DateTime @default(now())

  @@map("platform_revenues")
}

model Favorite {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("favorites")
}

model PropertyEnquiry {
  id          String          @id @default(cuid())
  subject     String
  message     String
  status      EnquiryStatus   @default(PENDING)
  priority    EnquiryPriority @default(NORMAL)
  isRead      Boolean         @default(false)
  response    String?
  respondedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  propertyId  String
  guestId     String
  hostId      String
  guest       User            @relation("GuestEnquiries", fields: [guestId], references: [id], onDelete: Cascade)
  host        User            @relation("HostEnquiries", fields: [hostId], references: [id], onDelete: Cascade)
  property    Property        @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_enquiries")
}

model CoHost {
  id            String             @id @default(cuid())
  permissions   CoHostPermission[]
  status        CoHostStatus       @default(PENDING)
  invitedAt     DateTime           @default(now())
  acceptedAt    DateTime?
  removedAt     DateTime?
  notes         String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  propertyId    String
  userId        String
  invitedBy     String
  invitedByUser User               @relation("CoHostInvitations", fields: [invitedBy], references: [id], onDelete: Cascade)
  property      Property           @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user          User               @relation("CoHostProperties", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([propertyId, userId])
  @@map("co_hosts")
}

model Blog {
  id            String          @id @default(cuid())
  title         String
  slug          String          @unique
  excerpt       String?
  content       String
  featuredImage String?
  status        BlogStatus      @default(DRAFT)
  publishedAt   DateTime?
  viewCount     Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  authorId      String
  BlogToBlogTag BlogToBlogTag[]
  comments      BlogComment[]
  author        User            @relation("BlogAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@map("blogs")
}

model BlogTag {
  id            String          @id @default(cuid())
  name          String          @unique
  slug          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  BlogToBlogTag BlogToBlogTag[]

  @@map("blog_tags")
}

model BlogComment {
  id         String   @id @default(cuid())
  content    String
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  blogId     String
  userId     String
  blog       Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user       User     @relation("BlogCommentAuthor", fields: [userId], references: [id], onDelete: Cascade)

  @@map("blog_comments")
}

model HelpCenter {
  id              String       @id @default(cuid())
  title           String
  slug            String       @unique
  content         String
  category        HelpCategory
  priority        HelpPriority @default(MEDIUM)
  isPublished     Boolean      @default(false)
  viewCount       Int          @default(0)
  helpfulCount    Int          @default(0)
  notHelpfulCount Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  authorId        String
  author          User         @relation("HelpAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@map("help_center")
}

model FapshiConfig {
  id          String            @id @default(cuid())
  serviceType FapshiServiceType
  isActive    Boolean           @default(false)
  apiKey      String
  apiUser     String
  webhookUrl  String?
  environment FapshiEnvironment @default(SANDBOX)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([serviceType, environment])
  @@map("fapshi_configs")
}

model CustomerSupport {
  id           String           @id @default(cuid())
  ticketId     String           @unique @default(cuid())
  subject      String
  description  String
  category     SupportCategory
  priority     SupportPriority  @default(MEDIUM)
  status       SupportStatus    @default(OPEN)
  userId       String
  assignedToId String?
  userEmail    String
  userPhone    String?
  attachments  String[]
  resolution   String?
  resolvedAt   DateTime?
  resolvedBy   String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  assignedTo   User?            @relation("AdminSupportTickets", fields: [assignedToId], references: [id])
  user         User             @relation("UserSupportTickets", fields: [userId], references: [id], onDelete: Cascade)
  messages     SupportMessage[]

  @@map("customer_support")
}

model SupportMessage {
  id          String          @id @default(cuid())
  ticketId    String
  senderId    String
  message     String
  isInternal  Boolean         @default(false)
  attachments String[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  sender      User            @relation("SupportMessageSender", fields: [senderId], references: [id])
  ticket      CustomerSupport @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("support_messages")
}

model BlogToBlogTag {
  A         String
  B         String
  blogs     Blog    @relation(fields: [A], references: [id], onDelete: Cascade)
  blog_tags BlogTag @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_BlogToBlogTag_AB_pkey")
  @@index([B], map: "_BlogToBlogTag_B_index")
  @@map("_BlogToBlogTag")
}

enum UserRole {
  GUEST
  HOST
  ADMIN
}

enum HostApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum PropertyType {
  ROOM
  STUDIO
  APARTMENT
  VILLA
  SUITE
  DORMITORY
  COTTAGE
  PENTHOUSE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum NotificationType {
  EMAIL
  PUSH
  SMS
}

enum NotificationStatus {
  UNREAD
  READ
  SENT
}

enum TransactionType {
  PAYMENT
  REFUND
  WITHDRAWAL
  DEPOSIT
  FEE
  BONUS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  PROCESSING
}

enum EnquiryStatus {
  PENDING
  RESPONDED
  CLOSED
  SPAM
}

enum EnquiryPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum HelpCategory {
  GETTING_STARTED
  BOOKING
  HOSTING
  PAYMENTS
  ACCOUNT
  SAFETY
  TROUBLESHOOTING
  GENERAL
}

enum HelpPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CoHostPermission {
  VIEW_ONLY
  MANAGE_BOOKINGS
  MANAGE_PROPERTY
  MANAGE_FINANCES
  FULL_ACCESS
}

enum CoHostStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REMOVED
}

enum FapshiServiceType {
  COLLECTION
  DISBURSEMENT
}

enum FapshiEnvironment {
  SANDBOX
  PRODUCTION
}

enum PaymentMethod {
  MOBILE_MONEY
  ORANGE_MONEY
  CARD
  CASH
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  EXPIRED
  SUCCESSFUL
  PAID
}

enum SupportCategory {
  BOOKING_ISSUES
  PAYMENTS_BILLING
  ACCOUNT_MANAGEMENT
  TECHNICAL_SUPPORT
  SAFETY_SECURITY
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_USER
  RESOLVED
  CLOSED
  ESCALATED
}
